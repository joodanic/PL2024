
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN BOOLEAN_LITERAL COLON COMMA DIVIDE DO DOT DOWNTO ELSE END EQ FOR FUNCTION GE GT IDENTIFIER IF INTEGER LBRACKET LE LENGTH LPAREN LT MINUS MOD NE NOT NUMBER OF OR PLUS PROGRAM RANGE RBRACKET READLN RPAREN SEMICOLON STRING STRING_TYPE THEN TIMES TO VAR WHILE WRITE WRITELNprogram : PROGRAM IDENTIFIER SEMICOLON function_decls block DOTblock : var_decls BEGIN stmt_list ENDvar_decls : VAR var_decl_list\n                 | emptyvar_decl_list : var_decl_list var_decl\n                     | var_declvar_decl : id_list COLON type SEMICOLONid_list : id_list COMMA IDENTIFIER\n               | IDENTIFIERtype : INTEGER\n            | BOOLEAN\n            | STRING_TYPE\n            | array_typearray_type : ARRAY LBRACKET NUMBER RANGE NUMBER RBRACKET OF simple_typesimple_type : INTEGER\n                   | BOOLEAN\n                   | STRING_TYPEfunction_decls : function_decls function_decl\n                      | emptyfunction_decl : FUNCTION IDENTIFIER LPAREN param_list RPAREN SEMICOLON block SEMICOLON\n                     | FUNCTION IDENTIFIER LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLONparam_list : param_list SEMICOLON param\n                  | param\n                  | emptyparam : id_list COLON typestmt_list : stmt_list SEMICOLON stmt\n                 | stmt_list SEMICOLON\n                 | stmt\n                 | emptystmt : assign_stmt\n            | if_stmt\n            | while_stmt\n            | for_stmt\n            | writeln_stmt\n            | readln_stmt\n            | write_stmt\n            | block_stmt\n            | func_callassign_stmt : var_ref ASSIGN logic_exprvar_ref : IDENTIFIER\n               | IDENTIFIER LBRACKET logic_expr RBRACKETif_stmt : IF logic_expr THEN stmt\n               | IF logic_expr THEN stmt ELSE stmtwhile_stmt : WHILE logic_expr DO stmtfor_stmt : FOR IDENTIFIER ASSIGN logic_expr TO logic_expr DO stmt\n                | FOR IDENTIFIER ASSIGN logic_expr DOWNTO logic_expr DO stmtwrite_stmt : WRITE LPAREN expr_list RPARENwriteln_stmt : WRITELN LPAREN expr_list RPAREN\n                    | WRITELNreadln_stmt : READLN LPAREN var_ref RPARENblock_stmt : BEGIN stmt_list ENDfunc_call : IDENTIFIER LPAREN expr_list RPARENexpr_list : expr_list COMMA logic_expr\n                 | logic_expr\n                 | emptylogic_expr : logic_expr AND rel_expr\n                  | logic_expr OR rel_expr\n                  | NOT rel_expr\n                  | rel_exprrel_expr : rel_expr EQ expr\n                | rel_expr NE expr\n                | rel_expr LT expr\n                | rel_expr GT expr\n                | rel_expr LE expr\n                | rel_expr GE expr\n                | exprexpr : expr PLUS term\n            | expr MINUS term\n            | termterm : term TIMES factor\n            | term DIVIDE factor\n            | term MOD factor\n            | factorfactor : LENGTH LPAREN expr RPAREN\n              | primaryprimary : NUMBER\n               | STRING\n               | BOOLEAN_LITERAL\n               | var_ref\n               | func_call\n               | LPAREN logic_expr RPARENempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,13,],[0,-1,]),'IDENTIFIER':([2,10,11,14,16,17,20,34,35,36,41,42,44,47,48,51,56,66,67,68,69,70,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,102,103,113,115,136,146,148,149,160,161,],[3,15,19,37,19,-6,37,63,63,65,19,-5,81,37,63,63,63,63,63,63,110,63,37,63,63,63,63,63,63,63,63,63,63,63,63,63,63,37,63,19,-7,63,37,63,63,37,37,]),'SEMICOLON':([3,14,20,21,22,23,24,25,26,27,28,29,30,31,32,38,41,45,46,47,50,52,53,54,57,58,59,60,61,62,63,71,72,73,75,76,77,78,79,82,83,84,94,112,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,135,137,138,139,140,143,144,147,151,152,154,162,164,165,168,169,170,171,],[4,-82,-82,47,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-49,-82,47,-2,-27,-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,113,-23,-24,115,-10,-11,-12,-13,-51,-26,-39,-58,141,-42,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-44,-52,-41,-48,-50,-47,-22,-25,-74,157,158,-43,166,-45,-46,-14,-15,-16,-17,]),'FUNCTION':([4,5,6,8,157,166,],[-82,10,-19,-18,-20,-21,]),'VAR':([4,5,6,8,141,157,158,166,],[-82,11,-19,-18,11,-20,11,-21,]),'BEGIN':([4,5,6,8,9,12,14,16,17,20,42,47,85,102,115,141,146,157,158,160,161,166,],[-82,-82,-19,-18,14,-4,20,-3,-6,20,-5,20,20,20,-7,-82,20,-20,-82,20,20,-21,]),'DOT':([7,46,],[13,-2,]),'END':([14,20,21,22,23,24,25,26,27,28,29,30,31,32,38,45,47,50,52,53,54,57,58,59,60,61,62,63,82,83,84,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,135,137,138,139,140,147,154,164,165,],[-82,-82,46,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-49,82,-27,-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,-51,-26,-39,-58,-42,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-44,-52,-41,-48,-50,-47,-74,-43,-45,-46,]),'IF':([14,20,47,85,102,146,160,161,],[34,34,34,34,34,34,34,34,]),'WHILE':([14,20,47,85,102,146,160,161,],[35,35,35,35,35,35,35,35,]),'FOR':([14,20,47,85,102,146,160,161,],[36,36,36,36,36,36,36,36,]),'WRITELN':([14,20,47,85,102,146,160,161,],[38,38,38,38,38,38,38,38,]),'READLN':([14,20,47,85,102,146,160,161,],[39,39,39,39,39,39,39,39,]),'WRITE':([14,20,47,85,102,146,160,161,],[40,40,40,40,40,40,40,40,]),'LPAREN':([15,34,35,37,38,39,40,48,51,55,56,63,66,67,68,70,86,87,88,89,90,91,92,93,95,96,97,98,99,100,103,136,148,149,],[41,56,56,66,68,69,70,56,56,100,56,66,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'COLON':([18,19,74,81,112,],[43,-9,114,-8,142,]),'COMMA':([18,19,50,52,53,54,57,58,59,60,61,62,63,66,68,70,74,81,94,104,105,106,108,111,118,119,120,121,122,123,124,125,126,127,128,129,130,132,135,137,147,150,],[44,-9,-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,-82,-82,-82,44,-8,-58,136,-54,-55,136,136,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-52,-41,-74,-53,]),'ELSE':([24,25,26,27,28,29,30,31,32,38,50,52,53,54,57,58,59,60,61,62,63,82,84,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,135,137,138,139,140,147,154,164,165,],[-30,-31,-32,-33,-34,-35,-36,-37,-38,-49,-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,-51,-39,-58,146,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-44,-52,-41,-48,-50,-47,-74,-43,-45,-46,]),'ASSIGN':([33,37,65,137,],[48,-40,103,-41,]),'NOT':([34,35,48,56,66,67,68,70,103,136,148,149,],[51,51,51,51,51,51,51,51,51,51,51,51,]),'LENGTH':([34,35,48,51,56,66,67,68,70,86,87,88,89,90,91,92,93,95,96,97,98,99,100,103,136,148,149,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'NUMBER':([34,35,48,51,56,66,67,68,70,86,87,88,89,90,91,92,93,95,96,97,98,99,100,103,116,136,148,149,153,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,145,58,58,58,159,]),'STRING':([34,35,48,51,56,66,67,68,70,86,87,88,89,90,91,92,93,95,96,97,98,99,100,103,136,148,149,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'BOOLEAN_LITERAL':([34,35,48,51,56,66,67,68,70,86,87,88,89,90,91,92,93,95,96,97,98,99,100,103,136,148,149,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'LBRACKET':([37,63,80,110,],[67,67,116,67,]),'RPAREN':([41,50,52,53,54,57,58,59,60,61,62,63,66,68,70,71,72,73,76,77,78,79,94,101,104,105,106,108,109,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,135,137,143,144,147,150,168,169,170,171,],[-82,-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,-82,-82,-82,112,-23,-24,-10,-11,-12,-13,-58,132,135,-54,-55,138,139,-40,140,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,147,-81,-52,-41,-22,-25,-74,-53,-14,-15,-16,-17,]),'INTEGER':([43,114,142,167,],[76,76,76,169,]),'BOOLEAN':([43,114,142,167,],[77,77,77,170,]),'STRING_TYPE':([43,114,142,167,],[78,78,78,171,]),'ARRAY':([43,114,142,],[80,80,80,]),'THEN':([49,50,52,53,54,57,58,59,60,61,62,63,94,118,119,120,121,122,123,124,125,126,127,128,129,130,132,135,137,147,],[85,-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,-58,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-52,-41,-74,]),'AND':([49,50,52,53,54,57,58,59,60,61,62,63,64,84,94,101,105,107,118,119,120,121,122,123,124,125,126,127,128,129,130,132,134,135,137,147,150,155,156,],[86,-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,86,86,-58,86,86,86,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,86,-52,-41,-74,86,86,86,]),'OR':([49,50,52,53,54,57,58,59,60,61,62,63,64,84,94,101,105,107,118,119,120,121,122,123,124,125,126,127,128,129,130,132,134,135,137,147,150,155,156,],[87,-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,87,87,-58,87,87,87,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,87,-52,-41,-74,87,87,87,]),'DO':([50,52,53,54,57,58,59,60,61,62,63,64,94,118,119,120,121,122,123,124,125,126,127,128,129,130,132,135,137,147,155,156,],[-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,102,-58,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-52,-41,-74,160,161,]),'RBRACKET':([50,52,53,54,57,58,59,60,61,62,63,94,107,118,119,120,121,122,123,124,125,126,127,128,129,130,132,135,137,147,159,],[-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,-58,137,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-52,-41,-74,163,]),'TO':([50,52,53,54,57,58,59,60,61,62,63,94,118,119,120,121,122,123,124,125,126,127,128,129,130,132,134,135,137,147,],[-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,-58,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,148,-52,-41,-74,]),'DOWNTO':([50,52,53,54,57,58,59,60,61,62,63,94,118,119,120,121,122,123,124,125,126,127,128,129,130,132,134,135,137,147,],[-59,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,-58,-56,-57,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,149,-52,-41,-74,]),'EQ':([50,52,53,54,57,58,59,60,61,62,63,94,118,119,120,121,122,123,124,125,126,127,128,129,130,132,135,137,147,],[88,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,88,88,88,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-52,-41,-74,]),'NE':([50,52,53,54,57,58,59,60,61,62,63,94,118,119,120,121,122,123,124,125,126,127,128,129,130,132,135,137,147,],[89,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,89,89,89,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-52,-41,-74,]),'LT':([50,52,53,54,57,58,59,60,61,62,63,94,118,119,120,121,122,123,124,125,126,127,128,129,130,132,135,137,147,],[90,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,90,90,90,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-52,-41,-74,]),'GT':([50,52,53,54,57,58,59,60,61,62,63,94,118,119,120,121,122,123,124,125,126,127,128,129,130,132,135,137,147,],[91,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,91,91,91,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-52,-41,-74,]),'LE':([50,52,53,54,57,58,59,60,61,62,63,94,118,119,120,121,122,123,124,125,126,127,128,129,130,132,135,137,147,],[92,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,92,92,92,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-52,-41,-74,]),'GE':([50,52,53,54,57,58,59,60,61,62,63,94,118,119,120,121,122,123,124,125,126,127,128,129,130,132,135,137,147,],[93,-66,-69,-73,-75,-76,-77,-78,-79,-80,-40,93,93,93,-60,-61,-62,-63,-64,-65,-67,-68,-70,-71,-72,-81,-52,-41,-74,]),'PLUS':([52,53,54,57,58,59,60,61,62,63,120,121,122,123,124,125,126,127,128,129,130,131,132,135,137,147,],[95,-69,-73,-75,-76,-77,-78,-79,-80,-40,95,95,95,95,95,95,-67,-68,-70,-71,-72,95,-81,-52,-41,-74,]),'MINUS':([52,53,54,57,58,59,60,61,62,63,120,121,122,123,124,125,126,127,128,129,130,131,132,135,137,147,],[96,-69,-73,-75,-76,-77,-78,-79,-80,-40,96,96,96,96,96,96,-67,-68,-70,-71,-72,96,-81,-52,-41,-74,]),'TIMES':([53,54,57,58,59,60,61,62,63,126,127,128,129,130,132,135,137,147,],[97,-73,-75,-76,-77,-78,-79,-80,-40,97,97,-70,-71,-72,-81,-52,-41,-74,]),'DIVIDE':([53,54,57,58,59,60,61,62,63,126,127,128,129,130,132,135,137,147,],[98,-73,-75,-76,-77,-78,-79,-80,-40,98,98,-70,-71,-72,-81,-52,-41,-74,]),'MOD':([53,54,57,58,59,60,61,62,63,126,127,128,129,130,132,135,137,147,],[99,-73,-75,-76,-77,-78,-79,-80,-40,99,99,-70,-71,-72,-81,-52,-41,-74,]),'RANGE':([145,],[153,]),'OF':([163,],[167,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_decls':([4,],[5,]),'empty':([4,5,14,20,41,66,68,70,141,158,],[6,12,23,23,73,106,106,106,12,12,]),'block':([5,141,158,],[7,151,162,]),'function_decl':([5,],[8,]),'var_decls':([5,141,158,],[9,9,9,]),'var_decl_list':([11,],[16,]),'var_decl':([11,16,],[17,42,]),'id_list':([11,16,41,113,],[18,18,74,74,]),'stmt_list':([14,20,],[21,45,]),'stmt':([14,20,47,85,102,146,160,161,],[22,22,83,117,133,154,164,165,]),'assign_stmt':([14,20,47,85,102,146,160,161,],[24,24,24,24,24,24,24,24,]),'if_stmt':([14,20,47,85,102,146,160,161,],[25,25,25,25,25,25,25,25,]),'while_stmt':([14,20,47,85,102,146,160,161,],[26,26,26,26,26,26,26,26,]),'for_stmt':([14,20,47,85,102,146,160,161,],[27,27,27,27,27,27,27,27,]),'writeln_stmt':([14,20,47,85,102,146,160,161,],[28,28,28,28,28,28,28,28,]),'readln_stmt':([14,20,47,85,102,146,160,161,],[29,29,29,29,29,29,29,29,]),'write_stmt':([14,20,47,85,102,146,160,161,],[30,30,30,30,30,30,30,30,]),'block_stmt':([14,20,47,85,102,146,160,161,],[31,31,31,31,31,31,31,31,]),'func_call':([14,20,34,35,47,48,51,56,66,67,68,70,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,102,103,136,146,148,149,160,161,],[32,32,62,62,32,62,62,62,62,62,62,62,32,62,62,62,62,62,62,62,62,62,62,62,62,62,62,32,62,62,32,62,62,32,32,]),'var_ref':([14,20,34,35,47,48,51,56,66,67,68,69,70,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,102,103,136,146,148,149,160,161,],[33,33,61,61,33,61,61,61,61,61,61,109,61,33,61,61,61,61,61,61,61,61,61,61,61,61,61,61,33,61,61,33,61,61,33,33,]),'logic_expr':([34,35,48,56,66,67,68,70,103,136,148,149,],[49,64,84,101,105,107,105,105,134,150,155,156,]),'rel_expr':([34,35,48,51,56,66,67,68,70,86,87,103,136,148,149,],[50,50,50,94,50,50,50,50,50,118,119,50,50,50,50,]),'expr':([34,35,48,51,56,66,67,68,70,86,87,88,89,90,91,92,93,100,103,136,148,149,],[52,52,52,52,52,52,52,52,52,52,52,120,121,122,123,124,125,131,52,52,52,52,]),'term':([34,35,48,51,56,66,67,68,70,86,87,88,89,90,91,92,93,95,96,100,103,136,148,149,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,126,127,53,53,53,53,53,]),'factor':([34,35,48,51,56,66,67,68,70,86,87,88,89,90,91,92,93,95,96,97,98,99,100,103,136,148,149,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,128,129,130,54,54,54,54,54,]),'primary':([34,35,48,51,56,66,67,68,70,86,87,88,89,90,91,92,93,95,96,97,98,99,100,103,136,148,149,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'param_list':([41,],[71,]),'param':([41,113,],[72,143,]),'type':([43,114,142,],[75,144,152,]),'array_type':([43,114,142,],[79,79,79,]),'expr_list':([66,68,70,],[104,108,111,]),'simple_type':([167,],[168,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER SEMICOLON function_decls block DOT','program',6,'p_program','PascalPly.py',618),
  ('block -> var_decls BEGIN stmt_list END','block',4,'p_block','PascalPly.py',625),
  ('var_decls -> VAR var_decl_list','var_decls',2,'p_var_decls','PascalPly.py',629),
  ('var_decls -> empty','var_decls',1,'p_var_decls','PascalPly.py',630),
  ('var_decl_list -> var_decl_list var_decl','var_decl_list',2,'p_var_decl_list','PascalPly.py',635),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list','PascalPly.py',636),
  ('var_decl -> id_list COLON type SEMICOLON','var_decl',4,'p_var_decl','PascalPly.py',643),
  ('id_list -> id_list COMMA IDENTIFIER','id_list',3,'p_id_list','PascalPly.py',647),
  ('id_list -> IDENTIFIER','id_list',1,'p_id_list','PascalPly.py',648),
  ('type -> INTEGER','type',1,'p_type','PascalPly.py',655),
  ('type -> BOOLEAN','type',1,'p_type','PascalPly.py',656),
  ('type -> STRING_TYPE','type',1,'p_type','PascalPly.py',657),
  ('type -> array_type','type',1,'p_type','PascalPly.py',658),
  ('array_type -> ARRAY LBRACKET NUMBER RANGE NUMBER RBRACKET OF simple_type','array_type',8,'p_array_type','PascalPly.py',662),
  ('simple_type -> INTEGER','simple_type',1,'p_simple_type','PascalPly.py',666),
  ('simple_type -> BOOLEAN','simple_type',1,'p_simple_type','PascalPly.py',667),
  ('simple_type -> STRING_TYPE','simple_type',1,'p_simple_type','PascalPly.py',668),
  ('function_decls -> function_decls function_decl','function_decls',2,'p_function_decls','PascalPly.py',672),
  ('function_decls -> empty','function_decls',1,'p_function_decls','PascalPly.py',673),
  ('function_decl -> FUNCTION IDENTIFIER LPAREN param_list RPAREN SEMICOLON block SEMICOLON','function_decl',8,'p_function_decl','PascalPly.py',680),
  ('function_decl -> FUNCTION IDENTIFIER LPAREN param_list RPAREN COLON type SEMICOLON block SEMICOLON','function_decl',10,'p_function_decl','PascalPly.py',681),
  ('param_list -> param_list SEMICOLON param','param_list',3,'p_param_list','PascalPly.py',688),
  ('param_list -> param','param_list',1,'p_param_list','PascalPly.py',689),
  ('param_list -> empty','param_list',1,'p_param_list','PascalPly.py',690),
  ('param -> id_list COLON type','param',3,'p_param','PascalPly.py',699),
  ('stmt_list -> stmt_list SEMICOLON stmt','stmt_list',3,'p_stmt_list','PascalPly.py',703),
  ('stmt_list -> stmt_list SEMICOLON','stmt_list',2,'p_stmt_list','PascalPly.py',704),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','PascalPly.py',705),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','PascalPly.py',706),
  ('stmt -> assign_stmt','stmt',1,'p_stmt','PascalPly.py',718),
  ('stmt -> if_stmt','stmt',1,'p_stmt','PascalPly.py',719),
  ('stmt -> while_stmt','stmt',1,'p_stmt','PascalPly.py',720),
  ('stmt -> for_stmt','stmt',1,'p_stmt','PascalPly.py',721),
  ('stmt -> writeln_stmt','stmt',1,'p_stmt','PascalPly.py',722),
  ('stmt -> readln_stmt','stmt',1,'p_stmt','PascalPly.py',723),
  ('stmt -> write_stmt','stmt',1,'p_stmt','PascalPly.py',724),
  ('stmt -> block_stmt','stmt',1,'p_stmt','PascalPly.py',725),
  ('stmt -> func_call','stmt',1,'p_stmt','PascalPly.py',726),
  ('assign_stmt -> var_ref ASSIGN logic_expr','assign_stmt',3,'p_assign_stmt','PascalPly.py',730),
  ('var_ref -> IDENTIFIER','var_ref',1,'p_var_ref','PascalPly.py',734),
  ('var_ref -> IDENTIFIER LBRACKET logic_expr RBRACKET','var_ref',4,'p_var_ref','PascalPly.py',735),
  ('if_stmt -> IF logic_expr THEN stmt','if_stmt',4,'p_if_stmt','PascalPly.py',742),
  ('if_stmt -> IF logic_expr THEN stmt ELSE stmt','if_stmt',6,'p_if_stmt','PascalPly.py',743),
  ('while_stmt -> WHILE logic_expr DO stmt','while_stmt',4,'p_while_stmt','PascalPly.py',750),
  ('for_stmt -> FOR IDENTIFIER ASSIGN logic_expr TO logic_expr DO stmt','for_stmt',8,'p_for_stmt','PascalPly.py',754),
  ('for_stmt -> FOR IDENTIFIER ASSIGN logic_expr DOWNTO logic_expr DO stmt','for_stmt',8,'p_for_stmt','PascalPly.py',755),
  ('write_stmt -> WRITE LPAREN expr_list RPAREN','write_stmt',4,'p_write_stmt','PascalPly.py',759),
  ('writeln_stmt -> WRITELN LPAREN expr_list RPAREN','writeln_stmt',4,'p_writeln_stmt','PascalPly.py',763),
  ('writeln_stmt -> WRITELN','writeln_stmt',1,'p_writeln_stmt','PascalPly.py',764),
  ('readln_stmt -> READLN LPAREN var_ref RPAREN','readln_stmt',4,'p_readln_stmt','PascalPly.py',771),
  ('block_stmt -> BEGIN stmt_list END','block_stmt',3,'p_block_stmt','PascalPly.py',775),
  ('func_call -> IDENTIFIER LPAREN expr_list RPAREN','func_call',4,'p_func_call','PascalPly.py',779),
  ('expr_list -> expr_list COMMA logic_expr','expr_list',3,'p_expr_list','PascalPly.py',783),
  ('expr_list -> logic_expr','expr_list',1,'p_expr_list','PascalPly.py',784),
  ('expr_list -> empty','expr_list',1,'p_expr_list','PascalPly.py',785),
  ('logic_expr -> logic_expr AND rel_expr','logic_expr',3,'p_logic_expr','PascalPly.py',794),
  ('logic_expr -> logic_expr OR rel_expr','logic_expr',3,'p_logic_expr','PascalPly.py',795),
  ('logic_expr -> NOT rel_expr','logic_expr',2,'p_logic_expr','PascalPly.py',796),
  ('logic_expr -> rel_expr','logic_expr',1,'p_logic_expr','PascalPly.py',797),
  ('rel_expr -> rel_expr EQ expr','rel_expr',3,'p_rel_expr','PascalPly.py',806),
  ('rel_expr -> rel_expr NE expr','rel_expr',3,'p_rel_expr','PascalPly.py',807),
  ('rel_expr -> rel_expr LT expr','rel_expr',3,'p_rel_expr','PascalPly.py',808),
  ('rel_expr -> rel_expr GT expr','rel_expr',3,'p_rel_expr','PascalPly.py',809),
  ('rel_expr -> rel_expr LE expr','rel_expr',3,'p_rel_expr','PascalPly.py',810),
  ('rel_expr -> rel_expr GE expr','rel_expr',3,'p_rel_expr','PascalPly.py',811),
  ('rel_expr -> expr','rel_expr',1,'p_rel_expr','PascalPly.py',812),
  ('expr -> expr PLUS term','expr',3,'p_expr','PascalPly.py',819),
  ('expr -> expr MINUS term','expr',3,'p_expr','PascalPly.py',820),
  ('expr -> term','expr',1,'p_expr','PascalPly.py',821),
  ('term -> term TIMES factor','term',3,'p_term','PascalPly.py',828),
  ('term -> term DIVIDE factor','term',3,'p_term','PascalPly.py',829),
  ('term -> term MOD factor','term',3,'p_term','PascalPly.py',830),
  ('term -> factor','term',1,'p_term','PascalPly.py',831),
  ('factor -> LENGTH LPAREN expr RPAREN','factor',4,'p_factor','PascalPly.py',838),
  ('factor -> primary','factor',1,'p_factor','PascalPly.py',839),
  ('primary -> NUMBER','primary',1,'p_primary','PascalPly.py',846),
  ('primary -> STRING','primary',1,'p_primary','PascalPly.py',847),
  ('primary -> BOOLEAN_LITERAL','primary',1,'p_primary','PascalPly.py',848),
  ('primary -> var_ref','primary',1,'p_primary','PascalPly.py',849),
  ('primary -> func_call','primary',1,'p_primary','PascalPly.py',850),
  ('primary -> LPAREN logic_expr RPAREN','primary',3,'p_primary','PascalPly.py',851),
  ('empty -> <empty>','empty',0,'p_empty','PascalPly.py',863),
]
